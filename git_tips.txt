2. リポジトリの作成
まず、GitHub上に新しいリポジトリを作成するか、既存のリポジトリを使用します。

3. ユーザーをコラボレーターとして追加
リポジトリの管理者は、以下の手順で他のユーザーをコラボレーターとして追加できます：

リポジトリのページにアクセスします。
「Settings」（設定）をクリックし、「Manage access」（アクセス管理）を選択します。
「Invite a collaborator」（コラボレーターを招待）ボタンをクリックします。
追加したいユーザーのGitHubユーザーネームまたはメールアドレスを入力し、「Add collaborator」（コラボレーターを追加）をクリックします。
招待されたユーザーは、メールで送られてくる招待リンクをクリックして承認する必要があります。
4. プロジェクトの管理
ユーザーを追加した後、各ユーザーはリポジトリへのプッシュ、プルリクエストの作成、イシューの投稿などを行うことができます。プロジェクトの管理を効率化するためには、以下のツールが役立ちます：

イシュートラッカー：プロジェクトの課題やタスクを管理します。
プルリクエスト：コードの変更をレビューし、ディスカッションを行う場です。
GitHub Projects：カンバンスタイルのプロジェクト管理ボードを提供し、タスクの進行状況を視覚的に追跡できます。


ユーザーネーム:skymeets
aero3525@gmail.com


ユーザーネーム:aeroskill
aeroskill7@gmail.com





echo "# rensyu01" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/skymeets/rensyu01.git
git push -u origin main


git remote add origin https://github.com/skymeets/rensyu01.git
git branch -M main
git push -u origin main



■VSC

git config --global user.name "samurai-tutorial"
git config --global user.email "samurai-tutorial"

cd C:\share\ITSchool\samurai\GitHub_Tutorial

git clone https://github.com/skymeets/rensyu01.git .


git checkout fix

git branch

git checkout -b fix2

git push -u origin main




GitHub mail:


git config --global user.name "skymeets"
git config --global user.email "aero3525@gmail.com"


設定確認
git config --global user.name
git config --global user.email

git config --global --list


デフォルトブランチ設定を確認
git config init.defaultBranch


デフォルトブランチ設定を「main」に変更
git config --global init.defaultBranch main



---------------------
操作内容	使うGitコマンド
ローカルリポジトリを新規作成する	git init
変更したファイルをインデックスに登録する	git add
変更をローカルリポジトリにコミットする	git commit
変更状況を確認する	git status
ファイルの具体的な変更内容を確認する	git diff
変更履歴（コミットログ）を確認する	git log
ファイルを削除し、インデックスに登録する	git rm
ファイルを移動し、インデックスに登録する	git mv
---------------------


作業例
# カレントディレクトリにgit_tutorialディレクトリを作成する
mkdir git_tutorial

# 作成したgit_tutorialディレクトリに移動する
cd git_tutorial

# カレントディレクトリにローカルリポジトリを新規作成する
git init

---------------------
# 1つのファイルをインデックスに登録する
git add [ファイルパス]

# ディレクトリごとインデックスに登録する
git add [ディレクトリパス]

# ワークツリーの変更をすべてインデックスに登録する
git add .
---------------------

git add sample.txt

git commit -m "最初のコミット"

git status

# インデックスとローカルリポジトリの変更差分を確認する
git diff --staged

---------------------
# コミットログを確認する
git log

# コミットログを1行で表示する
git log --oneline

# ファイル単位でコミットログを確認する
git log -p [ファイルパス]

# 表示するコミット数を制限する
git log -n [コミット数]
---------------------


---------------------
ファイルの削除を記録しよう
プログラム開発では、ファイルの追加や変更だけでなく、ファイルを削除したい場面もあります。

登録済みのファイルをローカルリポジトリから削除する場合、ただファイルを削除するだけではいけません。ファイルを追加・変更する場合と同様に、コミットが必要となります。

前述のgit addコマンドを用いてファイルを削除する場合の手順は、次の3ステップです。

ワークツリーからファイルを削除する
git addコマンドで、削除したファイルの情報をインデックスに登録する
git commitコマンドで、インデックスの削除情報をローカルリポジトリに反映する

もっと楽にファイルを削除したいなら、git rmコマンドが便利です。git rmコマンドは、ワークツリーからファイルを削除したうえで、インデックスにも登録してくれます。

git rm [ファイルパス]


ファイルの移動を記録しよう
ときには、ファイルの場所を移動したい場面もあります。このとき、「古い場所のファイルを削除」「新しい場所にファイルを追加」という2ステップが必要です。

git rmコマンドとgit addコマンドでも実現可能なものの、面倒ですよね。そこで便利なのが、git mvコマンドです。git mvコマンドを使えば、上記の2ステップを一度に行えます。

git mv [旧ファイルパス] [新ディレクトリパス]
---------------------



git mv sample.txt .\move_test
git status




ローカルリポジトリとリモートリポジトリを接続

git remote add [リモートリポジトリの簡易名] [リモートリポジトリのURL]


git remote add origin https://github.com/skymeets/rensyu01.git

リモートリポジトリの接続を確認するときは、-vオプションを使いましょう。
git remote -v


ローカルリポジトリをリモートリポジトリに反映

# インデックスとローカルリポジトリの変更差分を確認する
git diff --staged


リモートリポジトリに変更内容をプッシュ
git push -u [接続先のリモートリポジトリ] [ローカルリポジトリのブランチ名]

git push -u origin main


GitHubの画面でプッシュできたか確認

主な機能

ボタン	機能
Raw	ファイルの中身をそのままブラウザ上に表示できる。
Blame	ファイル内の行単位で、いつ誰が変更を加えたか確認できる。
History	ファイルのコミット履歴を時系列で確認できる。



変更を取り消す

パターン	主なGitコマンド
ワークツリーのファイルに加えた変更を取り消したい	git checkout
インデックスに登録した変更を取り消したい	git reset
ローカルリポジトリに反映した直前のコミットをやり直したい	git commit ?amend
リポジトリに反映した過去の変更を取り消したい	git revert


ワークツリーのファイルに加えた変更を取り消す
---------------------
ワークツリーのファイルに加えた変更を取り消すときには、git checkoutコマンドを使います。取り消す対象によって、以下のようにコマンドの書き方が異なります。

# ファイルの変更を取り消す
git checkout -- [ファイルパス]

# ディレクトリごと変更を取り消す
git checkout -- [ディレクトリパス]

# カレントディレクトリ配下の変更をすべて取り消す
git checkout -- .
---------------------


それでは実際に、ファイルの変更をgit checkoutコマンドで取り消してみましょう。
まずはgit_tutorialに移動し、以下のコマンドで「README.md」ファイルを作成してください。

# カレントディレクトリにREADME.mdファイルを作成
echo "侍テラコヤ" >> README.md

README.mdファイルをインデックスに追加し、ローカルリポジトリにコミット
# README.mdファイルをインデックスに登録
git add README.md

# README.mdファイルをローカルリポジトリにコミット
git commit -m "READMEファイル追加"

# README.mdファイルに「侍エンジニア」と追記
echo "侍エンジニア" >> README.md

# 変更を取り消す
git checkout -- README.md


インデックスに登録した変更を取り消し
---------------------
インデックスに登録した変更ファイルを、コミットはせずに取り消したいケースを考えます。インデックスの変更を元に戻す場合は、git resetコマンドを利用します。

# インデックスの変更をファイルごとに取り消す
git reset HEAD [ファイルパス]

# インデックスの変更をディレクトリごと取り消す
git reset HEAD [ディレクトリパス]

# インデックスの変更を全て取り消す
git reset HEAD .
---------------------

git addコマンドでステージに追加した変更を、git resetコマンドで取り消してみましょう。まずは、以下のコマンドでREADME.mdの変更をインデックスに登録します。
# README.mdファイルに変更を追加
echo "インデックスの変更取消しを確認" >> README.md

# README.mdファイルの変更をインデックスに追加
git add README.md

git status



以下のgit resetコマンドを実行

# インデックスの変更を取り消し
git reset HEAD README.md

git status


直前のコミットをやり直し
---------------------
続いて、コミットしてしまった変更を取り消す方法をみていきます。ローカルリポジトリにコミットしてから、以下のようなミスに気付くことも考えられます。

コミットメッセージを書き間違えた
ファイルをコミットし忘れた
このような場合は、git commitコマンドに--amendオプションを付けて実行しましょう。amendは「修正する」という意味で、文字どおり直前のコミットを修正できます。

直前のコミットメッセージを修正する場合の書き方は、以下のとおりです。通常のコミットに--amendオプションを付けることで、直前のコミットメッセージが変更されます。

# 直前のコミットメッセージを修正する場合
git commit --amend -m "修正後のコミットメッセージ"


# コミットし忘れたファイルを追加する場合
git add [直前のコミットに追加するファイルパス]
git commit --amend


# README.mdファイルに変更を追加
echo "コミットメッセージの修正を確認" >> README.md

# README.mdファイルの変更をインデックスに追加
git add README.md

# README.mdファイルの変更をローカルリポジトリにコミット
git commit -m "コミットメッセージを習性"
---------------------


ここではgit commit --amendを用いて、直前のコミットメッセージを変更してみましょう。まずは、以下の順にコマンドを実行して、README.mdに変更をコミットします。

# README.mdファイルに変更を追加
echo "コミットメッセージの修正を確認" >> README.md

# README.mdファイルの変更をインデックスに追加
git add README.md

# README.mdファイルの変更をローカルリポジトリにコミット
git commit -m "コミットメッセージを習性"


上記のコミットメッセージでは、「修正」を「習性」と間違えています。これを以下のコマンドで修正してみましょう。エラーが出なければ成功です。


# コミットメッセージの「習性」を「修正」に
git commit --amend -m "コミットメッセージを修正"

変更履歴を表示できるgit logコマンドを実行して、コミットメッセージを確認

# コミットログを1行で表示する
git log --oneline




リポジトリに反映した過去の変更を取り消したい

リモートリポジトリに反映済みのコミットは、前述のgit commit --amendで変更してはいけません。 別の開発メンバーが変更前のファイルを元にプログラムを書いていた場合、不整合が生じてしまうためです。

またローカルリポジトリでも、2つ以上前のコミットはそもそもgit commit --amendではやり直せません。リポジトリに反映した過去の変更を取り消したい場合は、git revertコマンドを使いましょう。

git revert [コミットID]


「コミットID」とは、コミットするときにGitが自動で付けるユニークな識別番号です。コミットIDは、4章で学んだgit logコマンドを実行することで確認できます。

git log --oneline


git revertコマンドは、指定したコミットIDの変更を打ち消すような変更をローカルリポジトリにコミットします。わかりづらいので、例を見てみましょう。

ファイルAの中身を「△△△」→「▲▲▲」に変更
というコミット2をgit revertコマンドで指定したとすると、

ファイルAの中身を「▲▲▲」→「△△△」に変更
という変更が新たにコミットされます。コミット2とは反対の変更内容を入れることで、結果的にコミット2が取り消されていることがわかります。




リモートリポジトリから変更を取得しよう(fetch／pull)

GitHub上にファイルが作成されたことを確認したら、以下のgit fetchコマンドを実行しましょう。

# リモートリポジトリの内容をローカルに反映する
git fetch origin main

この時点では、ワークツリー（git_tutorialディレクトリ）にindex.htmlファイルは存在しません。ワークツリーに変更を反映するために、以下のgit mergeコマンドを実行します。
git merge origin/main



ローカルリポジトリに取り込み、ワークツリーにも反映する（pull）

リモートリポジトリから取り込んだ変更を、ワークツリーにも反映するならgit pullコマンドを使います。git pullコマンドは、git fetchとgit mergeを組み合わせた動きをします。

# 現在の上流ブランチからすべてのブランチを取得＆マージ
git pull

# originにある全てのブランチを取得＆マージ
git pull origin

# originにあるmainのブランチを取得＆マージ
git pull origin main




新しいブランチを作成


ローカルリポジトリ内に新しいブランチを作成するときは、git branchコマンドを使う

git branch [作成するブランチ名]

上記を実行すると、カレントブランチ（現在操作中のブランチ） をベースにして、新しいブランチが作成されます。最初はmainブランチしかないため、mainブランチがベースです。

git branchコマンドを実際に使ってみましょう。cdコマンドでgit_turtorialディレクトリに移動し、以下のコマンドを実行してください。

# mainブランチをベースに、featureブランチを作成
git branch feature

git branch

リモートブランチも含めて表示したい場合は、-aオプションを付けましょう。

git branch -a



ブランチを切り替え

git checkout feature


ブランチの作成＆切り替えを同時に行うテクニック
「ブランチを作成してから切り替えるのが面倒」という方もいますよね。そのような場合は、git checkoutコマンドに-bオプションを付けるのがおすすめです。

# featureブランチを作成して、カレントブランチに設定
git checkout -b feature


作成したブランチをリモートリポジトリに追加

git push -u [接続先のリモートリポジトリ] [ローカルリポジトリのブランチ名]

# ローカルのfeatureブランチを、リモートリポジトリ（origin）に追加
git push -u origin feature


GitHubのリモートリポジトリ情報を見ると、以下のようにブランチが2つになっています。


変更をmainブランチにマージ

派生ブランチで開発が完了した変更は、mainブランチへのマージが必要です。別のブランチに変更をマージするときには、git mergeコマンドを使います。

git merge [マージ元のブランチ名]

上記のように実行すると、指定したブランチ内の変更が、カレントブランチにマージされます。マージ先ではなく、マージ元（すでに変更が入ったブランチ）を指定してください。

たとえば、featureブランチの変更をmainブランチにマージする場合は、以下の流れとなります。

git checkoutコマンドでmainブランチに切り替え
git mergeコマンドにfeatureブランチを指定して実行
実際に、featureブランチの変更をmainブランチにマージしてみましょう。まずは以下のコマンドを順番に実行し、featureブランチ内に「feature.html」ファイルを追加します。

# featureブランチに切り替え
git checkout feature

# feature.htmlを作成
echo "fugafuga" >> feature.html

# 作成したファイルをインデックスに追加
git add .

# 変更をローカルリポジトリに反映
git commit -m "feature.htmlを作成"


次に、git checkoutコマンドでマージ先となるmainブランチに切り替えます。

git checkout main

そしてfeatureブランチを指定して、git mergeコマンドを実行しましょう。

git merge feature


mainブランチにfeature.htmlファイルが追加されたか確認しましょう。git ls-treeコマンドを使うと、指定したブランチのファイル一覧を表示できます。

以下のコマンドを実行してください。なお、ファイル名だけを表示するために、--name-onlyオプションを付けています。

git ls-tree --name-only main

今回は、ローカルブランチの変更をマージしました。
リモートブランチの変更をローカルのカレントブランチに取り込みたい場合は、以下のように書きましょう。

# リモートブランチの変更をカレントブランチにマージ
git merge [マージ元のリモートリポジトリ名]/[リモートブランチ名]



作業を退避しよう

まだローカルリポジトリにコミットされていない変更を退避するときには、git stashコマンドを使います。stashは「隠す」という意味です。

具体的には、以下のファイルが退避データ（stash）として保存されます。

ワークツリーで変更されたファイル（git addコマンド未実行）
インデックスに登録されたファイル（git addコマンド実行済み）
退避後は、ワークツリーとインデックスが最新コミット（変更なし）の状態になります。

git stashコマンドで変更を一時退避する場合のコマンドは、以下のとおりです。「push」は省略できますが、後で登場するキーワードと区別するために付けています。

git stash push -u -m "わかりやすいメッセージ"


-uオプションを付けると、新しく追加したファイルも退避することが可能です。

また、-mオプションを付けることで、stashにメッセージを残せます。複数のstashデータがあると区別できなくなるため、わかりやすいメッセージを入力しましょう。

実際にgit stashコマンドで作業を退避しましょう。まずはcdコマンドでgit_tutorialディレクトリに移動し、以下のコマンドでワークツリー・インデックスに変更を加えてください。


# README.mdファイルに「一時退避を確認」と追記
echo "一時退避を確認" >> README.md

# stash_test.txtファイルを作成
echo "侍テラコヤ" >> stash_test.txt

# 変更内容をインデックスに登録
git add .

README.mdファイルへの追記と、stash_test.txtファイルの追加が変更点です。これらをコミットせずに、git stashコマンドで退避してみましょう。

git stash push -u -m "一時退避テスト"

ワークツリーにはstash_test.txtファイルがなく、README.mdファイルも元に戻っているはずです。念のため確認してみましょう。

また、git statusコマンドで変更状況を表示すると、インデックスも元に戻っていることが確認できます。



退避した作業を確認

退避した作業の一覧を確認したい場合は、git stashコマンドに「list」を付けましょう。

git stash list

上記のコマンドを実行すると、退避した作業内容の一覧を確認できます。


退避した作業を復元しよう

退避していた作業を再開したいときは、 git stashコマンドに「apply」を付けましょう。 カレントブランチ（現在作業中のブランチ）に、退避データを復元できます。

# 作業中のワークツリーだけを復元する
git stash apply

# インデックスの状態も復元する
git stash apply --index


上記の書き方だと、直近で退避したデータ（stash@{0}）が適用されます。それよりも前の退避データを復元したい場合は、以下のように退避データを指定しましょう。

# 退避データを指定して作業を復元する
git stash apply stash@{1}


ただし stash@{1}の番号部分は、退避データを保存するたびに1ずつ増えます。 退避データを指定する場合は、復元するものを間違えないようgit stash listで事前確認すべきです。

それでは、先ほど退避した内容をmainブランチに復元しましょう。以下のコマンドを実行してください。

git stash apply --index



退避データを削除しよう

作業の復元を行っても、退避データ自体は保持されます。退避データを削除する場合は、git stashコマンドに「drop」を付けましょう。

復元するときと同様に、退避データを指定することも可能です。

# 直近の退避データ（stash@{0}）を削除する
git stash drop

# 特定の退避データを削除する
git stash drop stash@{番号}

それでは、実際に退避データを削除してみましょう。以下のコマンドを実行してください。

git stash drop


退避データを削除したため、git stash listを実行しても何も表示されないはずです。

なお、すべての退避データを削除する場合は、「clear」を付けてください。

# すべての退避データを削除する
git stash clear





プルリクエストの流れ
プルリクエストまでの大まかな流れは、以下の8ステップです。

ローカルのmainブランチを最新の状態にする
プルリクエスト用のローカルブランチを作成する
作成したローカルブランチに変更をコミットする
GitHub上のリモートリポジトリにプッシュする
プルリクエストを作成する
コードレビューをしてもらう
プルリクエストをマージする
ブランチを削除する
プルリクエスト機能を使うためには、専用のブランチを作成する必要があります。 そのブランチに入れた変更をリモートリポジトリに追加して、プルリクエストを作成。

プルリクエストは、メールで通知されます。通知を受け取ったチームメンバーはGitHub上で変更内容をレビューし、問題があればコメント、問題なければ承認します。

メンバーに変更がすべて承認されたら、mainブランチにマージしましょう。マージが済んだら、プルリクエスト用のブランチを削除して完了、という流れです。




プルリクエストを作成


ローカルのmainブランチを最新の状態にする

# mainブランチに切り替える
git checkout main

# mainブランチを最新の状態にする
git pull



プルリクエスト用のローカルブランチを作成する

ローカルのmainブランチが最新の状態になったら、プルリクエスト用のブランチを作成します。ここでは、「pull_request」という名前のブランチを作成しましょう。

ブランチ作成＆切り替えを同時に行うコマンドは、8章で学びました。以下のように、git checkoutコマンドに-bオプションを付けるのでしたね。

# プルリクエスト用のブランチを作成して、ブランチを切り替える
git checkout -b pull_request


 作成したローカルブランチに変更をコミットする

プルリクエスト用のpull_requestブランチに、コードレビューしてもらいたい変更を入れましょう。

実際には、自分の開発用ブランチで対応済みの変更をマージすることも多いです。今回は流れの確認のため、index.htmlファイルにそのまま「プルリクエストを確認」と入れます。

ファイルを変更したら、git addコマンドでインデックスに登録し、git commitコマンドでコミットしましょう。

# ファイルの変更をインデックスに登録
git add index.html

# ファイルの変更をコミット
git commit -m "プルリクエストを確認"

 GitHub上のリモートリポジトリにプッシュする
コミットできたら、pull_requestブランチをリモートリポジトリにプッシュします。以下を実行すると、リモートリポジトリ（origin）内にpull_requestブランチが追加されます。

# pull_requestブランチをリモートリポジトリにプッシュする
git push origin pull_request


プルリクエストを作成する

リモートリポジトリにプッシュできたら、実際にプルリクエストを作成します。まずは、GitHubのリモートリポジトリ画面を開いてください。

新しいブランチをリモートリポジトリにプッシュすると、以下の黄色い通知がしばらく表示されます。赤枠の「Compare ＆ pull request」をクリックしましょう。



上記[1]〜[5]を順番に対応していきましょう。

項目	すべきこと
[1] 対象ブランチ	「base: main」「compare: pull_request」となっていることを確認
[2] タイトル	プルリクエストのタイトルを入力
[3] コメント	プルリクエストを送る開発メンバーに伝えたい内容を入力
[4] ファイル差分	レビューしてもらいたい変更内容に間違いがないことを確認
[5] 作成ボタン	確認・入力がひと通り済んだら押して、プルリクエストを作成
（6） コードレビューをしてもらう
プルリクエストを作成すると、レビュアー（レビュー担当者）にメールが送信されます。レビュアーがプルリクエストを開き、プログラムの変更内容に問題がないか確認します。

問題がなければ承認、問題があればコメントの通知が来るため、しばらく待ちましょう。ただし今回はレビュアーがいないため、変更内容が承認されたものとして先に進みます。


プルリクエストをマージする
プルリクエストが承認されたら、マージを行いましょう。作成したプルリクエスト画面の下部にある「Merge pull request」をクリックします。



ブランチを削除する
プルリクエストでのマージまで完了したら、作成したブランチは不要になります。特別な事情がなければ、プルリクエスト用のブランチを削除しましょう。

マージ完了後に表示される以下の画面で、「Delete branch」をクリックしてください。



ただし、上記のボタンではリモートのpull_requestブランチしか削除されません。ローカルのpull_requestブランチは、以下のコマンドで削除しましょう。

# mainブランチに切り替える
git checkout main

# 不要になったローカルのpull_requestブランチを削除
git branch -D pull_request

git branchコマンドに-Dオプションを付けることで、ブランチを削除できます。ただし、カレントブランチは削除できないため、mainブランチに切り替えています。

また、リモートのmainブランチにマージした変更は、git pullコマンドでローカルのmainブランチにも取り込んでおきましょう。

# mainブランチを最新の状態にする
git pull






